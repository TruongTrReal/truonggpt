import { useState, useMemo, useEffect, useRef, ReactNode  } from "react";
import { Chat } from "../Chat";
import { useChat } from "../hooks/use-chat";
import { ChatMessage } from "../components/ChatMessage";
import { appConfig } from "../../config.browser";
import { Welcome } from "../components/Welcome";

interface IndexProps {
  email: string;
  plan: string;
  logOut: () => Promise<boolean>;
  planButton: ReactNode;
}

export default function Index({ plan, email, logOut, planButton }: IndexProps) {

  const canAccessGPT35 = plan === "FREE" || plan === "PRO" || plan === "PREMIUM";
  const canAccessGPT4 = plan === "PRO" || plan === "PREMIUM";

  const [selectedModel, setSelectedModel] = useState("gpt-3.5-turbo-16k");
  
  // The content of the box where the user is typing
  const [message, setMessage] = useState<string>("");
  const [inputHeight, setInputHeight] = useState<number | null>(null);

  const maxTextAreaHeight = 200;

  const [showGPT4Message, setShowGPT4Message] = useState(false);

  const handleGPT4ButtonClick = () => {
    if (!canAccessGPT4) {
      setShowGPT4Message(true); // Show the message when the button is clicked
    } else {
      setSelectedModel("gpt-4-0613");
    }
  };

  // This hook is responsible for managing the chat and communicating with the
  // backend
  const { currentChat, chatHistory, sendMessage, cancel, state, clear } =
    useChat();

  // This is the message that is currently being generated by the AI
  const currentMessage = useMemo(() => {
    return { content: currentChat ?? "", role: "assistant" } as const;
  }, [currentChat]);

  // This is a ref to the bottom of the chat history. We use it to scroll
  // to the bottom when a new message is added.
  const bottomRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    scrollToBottom();
  }, [currentChat, chatHistory, state]);

  const scrollToBottom = () => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // This is a ref to the input box. We use it to focus the input box when the
  // user clicks on the "Send" button.
  const inputRef = useRef<HTMLInputElement>(null);
  const focusInput = () => {
    inputRef.current?.focus();
  };

  const [isDivVisible, setIsDivVisible] = useState(false); // State to control div visibility

  const toggleDivVisibility = () => {
    setIsDivVisible((prev) => !prev); // Toggle div visibility
  };

  useEffect(() => {
    focusInput();
  }, [state]);

  


  return (
    <Chat title="TruongGPT">
      <main className="bg-black-700 md:rounded-lg md:shadow-md w-full h-full flex flex-col">

        {/* Toggle Button (Visible on Mobile) */}
        <div className="bg-black-700 w-full sticky mb-5 top-0 md:hidden">
          <button
            className="block md:hidden bg-purple-500 text-white p-2 rounded"
            onClick={toggleDivVisibility}
          >
            Truonggpt.com
          </button>
        </div>

        {/* Animated div */}
        <div
          className={`md:hidden z-10 fixed top-0 left-0 h-[100vh] w-4/5 bg-gray-200 transform ${
            isDivVisible ? "translate-x-0" : "-translate-x-full"
          } transition-transform duration-300 ease-in-out`}
        >
          <button
            className="block md:hidden text-black text-3xl p-5 absolute top-0 right-0"
            onClick={toggleDivVisibility}
          >
            X
          </button>
          <div className="flex flex-col items-center justify-center w-full p-10">
            <p className="w-full text-black mb-4">üêßüöÄ{email}</p>
            <p className="w-full text-black mb-4">G√≥i: {plan}</p>
            {planButton}
            <a
              href="/" // Path you want to redirect to
              className="bg-green-500 text-white p-2 rounded mt-5 mb-5 block"
            >
              Trang ch·ªß
            </a>

            <div className="flex justify-between space-x-4 mb-4">

              <button
                className={`${
                  selectedModel === "gpt-3.5-turbo-16k" ? "bg-purple-500" : "bg-gray-300"
                } text-black py-2 px-4 rounded-lg`}
                onClick={() => setSelectedModel("gpt-3.5-turbo-16k")}
              >
                GPT-3.5
              </button>

              <button
                className={`${
                  selectedModel === "gpt-4-0613" ? "bg-purple-700" : "bg-gray-300"
                } text-black py-2 px-4 rounded-lg`}
                onClick={handleGPT4ButtonClick}
                title="Switch to GPT-4"
              >
                GPT-4
              </button>

              {chatHistory.length > -1 ? (
                <button
                  className="rounded-lg bg-gray-100 text-gray-600 py-2 px-4 flex-1"
                  type="button"
                  onClick={(e) => {
                    e.preventDefault();
                    clear();
                    setMessage("");
                  }}
                >
                  Clear
                </button>
              ) : null}

            </div>

            {showGPT4Message && (
              <div className="text-red-500 text-sm mb-2 flex">
                N√¢ng c·∫•p PRO ho·∫∑c PREMIUM ƒë·ªÉ s·ª≠ d·ª•ng GPT-4
              </div>
            )}

            <button
              className="absolute bottom-5 bg-blue-500 text-white px-4 py-2 rounded"
              onClick={logOut}
            >
              ƒêƒÉng Xu·∫•t üö™.
            </button>
          </div>
        </div>

        <section className="overflow-y-auto flex-grow mb-4 pb-8">
          <div className="flex flex-col space-y-4">
            {chatHistory.length === 0 ? (
              <>
                <Welcome />
                <div className="text-black grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {appConfig.samplePhrases.map((phrase) => (
                    <button
                      key={phrase}
                      onClick={() => sendMessage(plan, phrase, chatHistory, selectedModel)}
                      className="bg-gray-100 border-gray-300 border-2 rounded-lg p-4"
                    >
                      {phrase}
                    </button>
                  ))}
                </div>
              </>
            ) : (
              chatHistory.map((chat, i) => (
                <ChatMessage key={i} message={chat} />
              ))
            )}

            {currentChat ? <ChatMessage message={currentMessage} /> : null}
          </div>

          <div ref={bottomRef} />
        </section>

        <div className="">
          {state === "idle" ? null : (
            <button
              className="rounded-lg h-10 bg-gray-100 text-gray-900 py-2 px-4 my-8"
              onClick={cancel}
            >
              D·ª´ng tr·∫£ l·ªùi
            </button>
          )}
        </div>

        <section className="flex flex-col rounded-lg p-2 sticky bottom-0">

          <div className="flex justify-between space-x-4 mb-4">

            <button
              className={`${
                selectedModel === "gpt-3.5-turbo-16k" ? "bg-purple-500" : "bg-gray-300"
              } text-black py-2 px-4 rounded-lg hidden md:flex-1`}
              onClick={() => setSelectedModel("gpt-3.5-turbo-16k")}
            >
              GPT-3.5
            </button>

            <button
              className={`${
                selectedModel === "gpt-4-0613" ? "bg-purple-700" : "bg-gray-300"
              } text-black py-2 px-4 rounded-lg hidden md:flex-1`}
              onClick={handleGPT4ButtonClick}
              title="Switch to GPT-4"
            >
              GPT-4
            </button>

            {chatHistory.length > -1 ? (
              <button
                className="rounded-lg bg-gray-100 text-gray-600 py-2 px-4 hidden md:flex-1"
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  clear();
                  setMessage("");
                }}
              >
                Clear
              </button>
            ) : null}

            <form
              className="flex flex-col items-stretch"
              onSubmit={(e) => {
                e.preventDefault();
                if (canAccessGPT35) {
                  sendMessage(plan, message, chatHistory, selectedModel);
                  setMessage("");
                  setInputHeight(null); // Reset the input height after submission
                } else {
                  // Handle a message to inform the user about their plan's access restriction
                }
              }}
            >

              {state === "idle" ? (
                <button
                  className={`${
                    canAccessGPT35 ? "bg-blue-700" : "bg-gray-300"
                  } text-white font-bold py-2 px-4 rounded-lg`}
                  type="submit"
                  disabled={!canAccessGPT35} // Disable the button if the user can't access GPT-3.5
                >
                  G·ª≠i
                </button>
              ) : null}

            </form>

          </div>

          {showGPT4Message && (
            <div className="text-red-500 text-sm mb-2 hidden md:flex">
              N√¢ng c·∫•p PRO ho·∫∑c PREMIUM ƒë·ªÉ s·ª≠ d·ª•ng GPT-4
            </div>
          )}

          <textarea
            className="resize-none w-full rounded-lg p-2 outline-none"
            placeholder={
              canAccessGPT35
                ? state === "idle"
                  ? "... (d√πng Enter ƒë·ªÉ xu·ªëng d√≤ng) ..."
                  : "..."
                : "N√¢ng c·∫•p l√™n PRO ho·∫∑c PREMIUM ƒë·ªÉ s·ª≠ d·ª•ng GPT-4"
            }
            value={message}
            onChange={(e) => {
              setMessage(e.target.value);
              // Dynamically adjust the textarea height as the user types, up to the maximum height
              setInputHeight(
                Math.min(e.target.scrollHeight, maxTextAreaHeight)
              );
            }}
            style={{
              height: inputHeight ? `${inputHeight}px` : "auto",
              maxHeight: `${maxTextAreaHeight}px`, // Set the maximum height
              overflowY: inputHeight ? "auto" : "hidden", // Add a scrollbar when needed
            }}
            rows={1} // Start with a single row
            disabled={!canAccessGPT35 || state !== "idle"}
          />

        </section>


      </main>
    </Chat>
  );
}
